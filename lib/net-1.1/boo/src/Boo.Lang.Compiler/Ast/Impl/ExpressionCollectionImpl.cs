#region license
// Copyright (c) 2003, 2004, 2005 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by astgen.boo.
//

namespace Boo.Lang.Compiler.Ast
{
	using System;
	using Boo.Lang;
	using Boo.Lang.Compiler.Ast;
	
	[Serializable]
	[EnumeratorItemType(typeof(Boo.Lang.Compiler.Ast.Expression))]
	public class  ExpressionCollectionImpl : NodeCollection
	{
		public static ExpressionCollection FromArray(params Boo.Lang.Compiler.Ast.Expression[] items)
		{
			ExpressionCollection collection = new ExpressionCollection();
			collection.Extend(items);
			return collection;
		}
		
		protected  ExpressionCollectionImpl()
		{
		}

		protected  ExpressionCollectionImpl(Boo.Lang.Compiler.Ast.Node parent) : base(parent)
		{
		}

		public Boo.Lang.Compiler.Ast.ExpressionCollection PopRange(int begin)
		{
			Boo.Lang.Compiler.Ast.ExpressionCollection range = new Boo.Lang.Compiler.Ast.ExpressionCollection(_parent);
			range.InnerList.Extend(InternalPopRange(begin));
			return range;
		}
		
		public Boo.Lang.Compiler.Ast.Expression this[int index]
		{
			get { return (Boo.Lang.Compiler.Ast.Expression)InnerList[index]; }
			set { ReplaceNodeAt(index, value); }
		}
		
		public void Add(Boo.Lang.Compiler.Ast.Expression item)
		{
			AddImpl(item);
		}
		
		public void Insert(int index, Boo.Lang.Compiler.Ast.Expression item)
		{
			InsertImpl(index, item);
		}
		
		public bool Replace(Boo.Lang.Compiler.Ast.Expression existingNode, Boo.Lang.Compiler.Ast.Expression newNode)
		{
			return ReplaceImpl(existingNode, newNode);
		}
		
		public void ReplaceAt(int index, Boo.Lang.Compiler.Ast.Expression newNode)
		{
			ReplaceNodeAt(index, newNode);
		}
		
		public Boo.Lang.Compiler.Ast.Expression[] ToArray()
		{
			return (Boo.Lang.Compiler.Ast.Expression[])ToArray(typeof(Boo.Lang.Compiler.Ast.Expression));
		}
		
		public Boo.Lang.Compiler.Ast.Expression[] ToReverseArray()
		{
			return (Boo.Lang.Compiler.Ast.Expression[])ToReverseArray(typeof(Boo.Lang.Compiler.Ast.Expression));
		}
	}
}

